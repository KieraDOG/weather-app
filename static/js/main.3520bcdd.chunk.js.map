{"version":3,"sources":["components/Current/Current.module.css","components/Forecast/components/Weather/Weather.module.css","App.module.css","components/OtherCities/components/City/City.module.css","components/Current/components/Meta/Meta.module.css","components/OtherCities/OtherCities.module.css","components/Current/components/Text/Text.module.css","components/Forecast/Forecast.module.css","components/Current/components/Text/Text.js","components/Current/components/Meta/Meta.js","components/Temperature/Temperature.js","components/VerticalDivider/VerticalDivider.js","components/Current/Current.js","components/OtherCities/components/City/City.js","components/OtherCities/OtherCities.js","components/Forecast/components/Weather/Weather.js","components/Forecast/Forecast.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","cx","classNames","bind","styles","Text","children","className","Meta","title","value","meta","Temperature","VerticalDivider","color","width","style","backgroundColor","Current","current","left","temperature","weather","metas","humidity","wind","right","city","bottom","City","name","src","icon","alt","description","OtherCities","otherCities","header","cities","Weather","day","Forecast","forecast","App","app","top","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3520bcdd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"current\":\"Current_current__2bCtp\",\"left\":\"Current_left__3KflQ\",\"right\":\"Current_right__3aLAj\",\"bottom\":\"Current_bottom__1ZcpP\",\"temperature\":\"Current_temperature__3INBI\",\"weather\":\"Current_weather__IJi8t\",\"metas\":\"Current_metas__3u91J\",\"humidity\":\"Current_humidity__nzLzK\",\"wind\":\"Current_wind__354z-\",\"city\":\"Current_city__1g754\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weather\":\"Weather_weather__3jsGy\",\"day\":\"Weather_day__2jzaX\",\"temperature\":\"Weather_temperature__3Mhk9\",\"description\":\"Weather_description__1PduP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"weather\":\"App_weather__2omPa\",\"bottom\":\"App_bottom__2k0cJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"city\":\"City_city__17egf\",\"name\":\"City_name__2_DgT\",\"temperature\":\"City_temperature__2n7RT\",\"weather\":\"City_weather__2oL6g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"meta\":\"Meta_meta__2kyDj\",\"title\":\"Meta_title__6wWW7\",\"value\":\"Meta_value__wTczh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"otherCities\":\"OtherCities_otherCities__jnC3A\",\"header\":\"OtherCities_header__2tsE7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Text_text__2sREv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forecast\":\"Forecast_forecast__3_gmE\"};","import React from 'react';\nimport classNames from 'classnames/bind';\nimport styles from './Text.module.css';\n\nconst cx = classNames.bind(styles);\n\nconst Text = ({\n  children,\n  className,\n}) => (\n  <span className={cx('text', className)}>\n    {children}\n  </span>\n);\n\nexport default Text","import React from 'react';\nimport styles from './Meta.module.css';\nimport Text from '../Text';\n\nconst Meta = ({\n  title,\n  value,\n}) => (\n  <div className={styles.meta}>\n    <Text className={styles.title}>{title}</Text>\n    <br />\n    <Text className={styles.value}>{value}</Text>\n  </div>\n);\n\nexport default Meta;\n","import React from 'react';\n\nconst Temperature = ({\n  children,\n  className,\n}) => (\n  <span className={className}>\n    {children}\n    <span>&nbsp;</span>\n    <span>&#176;</span>\n  </span>\n);\n\nexport default Temperature\n","import React from 'react';\n\nconst VerticalDivider = ({\n  color,\n  width,\n  className,\n}) => (\n  <div \n    className={className}\n    style={{\n      width,\n      backgroundColor: color,\n    }} \n  />\n);\n\nexport default VerticalDivider;","import React from 'react';\nimport styles from './Current.module.css';\nimport Meta from './components/Meta';\nimport Text from './components/Text';\nimport Temperature from '../Temperature';\nimport VerticalDivider from '../VerticalDivider';\n\nconst Current = () => (\n  <div className={styles.current}>\n    <div className={styles.left}>\n      <div className={styles.temperature}>\n        <Temperature>12</Temperature>\n      </div>\n      <div className={styles.weather}>\n        <Text>CLOUDY</Text>\n      </div>\n      <div className={styles.metas}>\n        <div className={styles.humidity}>\n          <Meta title=\"HUMIDITY\" value=\"64%\" />\n        </div>\n        <VerticalDivider width=\"2px\" color=\"rgba(255, 255, 255, 0.7)\" />\n        <div className={styles.wind}>\n          <Meta title=\"WIND\" value=\"12 K/M\" />\n        </div>\n      </div>\n    </div>\n    <div className={styles.right}>\n      <h1 className={styles.city}>Melbourne</h1>\n    </div>\n    <div className={styles.bottom} />\n  </div>\n);\n\nexport default Current;\n","import React from 'react';\nimport styles from './City.module.css';\nimport Temperature from '../../../Temperature';\n\nconst City = ({\n  name,\n  weather,\n  temperature,\n}) => (\n  <div className={styles.city}>\n    <h3 className={styles.name}>{name}</h3>\n    <div className={styles.temperature}>\n      <Temperature>{temperature}</Temperature>\n    </div>\n    <div className={styles.weather}>\n      <img src={`http://openweathermap.org/img/wn/${weather.icon}.png`} alt={weather.description} />\n      <span>{weather.description}</span>\n    </div>\n  </div>\n);\n\nexport default City;\n","import React from 'react';\nimport styles from './OtherCities.module.css';\nimport City from './components/City';\n\nconst OtherCities = () => (\n  <div className={styles.otherCities}>\n    <h2 className={styles.header}>Other Cities</h2>\n    <div className={styles.cities}>\n      <City \n        name=\"Sydney\" \n        temperature=\"13\"\n        weather={{ icon: '09d', description: 'Rain' }} \n      />\n      <City \n        name=\"Brisbane\" \n        temperature=\"21\"\n        weather={{ icon: '11d', description: 'Thunderstorm' }} \n      />\n      <City \n        name=\"Perth\" \n        temperature=\"39\"\n        weather={{ icon: '02d', description: 'Clouds' }} \n      />\n    </div>\n  </div>\n);\n\nexport default OtherCities;","import React from 'react';\nimport styles from './Weather.module.css';\nimport Temperature from '../../../Temperature';\n\nconst Weather = ({\n  day,\n  temperature,\n  weather,\n}) => (\n  <div className={styles.weather}>\n    <div className={styles.day}>{day}</div>\n    <div className={styles.temperature}>\n      <Temperature>{temperature}</Temperature>\n    </div>\n    <img \n      className={styles.icon}\n      src={`http://openweathermap.org/img/wn/${weather.icon}@2x.png`} \n      alt={weather.description} \n    />\n    <div className={styles.description}>{weather.description}</div>\n  </div>\n);\n\nexport default Weather;","import React from 'react';\nimport styles from './Forecast.module.css';\nimport Weather from './components/Weather';\n\nconst Forecast = () => (\n  <div className={styles.forecast}>\n    <Weather\n      day=\"MON\" \n      temperature=\"9\"\n      weather={{ icon: '11d', description: 'Thunderstorm' }} \n    />\n    <Weather \n      day=\"TUE\" \n      temperature=\"15\"\n      weather={{ icon: '01d', description: 'Clear' }} \n    />\n    <Weather \n      day=\"WED\" \n      temperature=\"11\"\n      weather={{ icon: '03d', description: 'Clouds' }} \n    />\n    <Weather \n      day=\"THU\" \n      temperature=\"7\"\n      weather={{ icon: '50d', description: 'Mist' }} \n    />\n    <Weather \n      day=\"FRI\" \n      temperature=\"8\"\n      weather={{ icon: '09d', description: 'Rain' }} \n    />\n  </div>\n);\n\nexport default Forecast;","import React from 'react';\nimport styles from './App.module.css';\nimport Current from './components/Current';\nimport OtherCities from './components/OtherCities';\nimport VerticalDivider from './components/VerticalDivider';\nimport Forecast from './components/Forecast';\n\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <div className={styles.weather}>\n        <div className={styles.top}>\n          <Current />\n        </div>\n        <div className={styles.bottom}>\n          <OtherCities />\n          <VerticalDivider color=\"rgba(0, 0, 0, 0.1)\" width=\"3px\" />\n          <Forecast />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}