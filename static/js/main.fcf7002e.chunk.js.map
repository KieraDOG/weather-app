{"version":3,"sources":["App.module.css","components/OtherCities/components/City/City.module.css","components/Forecast/components/Weather/Weather.module.css","components/Current/components/Meta/Meta.module.css","components/Forecast/Forecast.module.css","components/Current/Current.module.css","components/OtherCities/OtherCities.module.css","components/Current/components/Text/Text.module.css","store/city/reducer.js","store/store.js","store/city/type.js","components/Current/components/Text/Text.js","components/Current/components/Meta/Meta.js","components/Temperature/Temperature.js","components/VerticalDivider/VerticalDivider.js","utils/OpenWeatherMap/OpenWeatherMap.js","apis/getWeather/getWeather.js","components/Current/Current.js","components/OtherCities/components/City/City.js","apis/getWeathers/getWeathers.js","components/OtherCities/OtherCities.js","store/city/actions/setCity/setCity.js","components/Forecast/components/Weather/Weather.js","components/Forecast/Forecast.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DEFAULT_CITY","name","id","reducer","combineReducers","city","state","action","type","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","cx","classNames","bind","styles","Text","children","className","Meta","title","value","meta","Temperature","VerticalDivider","color","width","style","backgroundColor","OpenWeatherMap","axios","create","baseURL","interceptors","request","use","config","params","appid","units","get","Current","props","data","loading","this","getWeather","setState","data-testid","current","left","Fragment","temperature","main","temp","weather","metas","humidity","wind","speed","right","bottom","React","Component","CurrentContainer","connect","City","onClick","src","icon","alt","description","ids","join","CITIES","OtherCities","toggle","getWeathers","map","c","currentCity","onCityClick","otherCities","s","active","header","cities","list","item","key","parseInt","OtherCitiesContainer","dispatch","setCity","Weather","day","Forecast","forecast","weathers","App","app","top","verticalDivider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fcf7002e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"weather\":\"App_weather__2omPa\",\"bottom\":\"App_bottom__2k0cJ\",\"verticalDivider\":\"App_verticalDivider__3UIhP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"city\":\"City_city__17egf\",\"name\":\"City_name__2_DgT\",\"temperature\":\"City_temperature__2n7RT\",\"weather\":\"City_weather__2oL6g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weather\":\"Weather_weather__3jsGy\",\"day\":\"Weather_day__2jzaX\",\"icon\":\"Weather_icon__1hI0I\",\"temperature\":\"Weather_temperature__3Mhk9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"meta\":\"Meta_meta__2kyDj\",\"title\":\"Meta_title__6wWW7\",\"value\":\"Meta_value__wTczh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forecast\":\"Forecast_forecast__3_gmE\",\"header\":\"Forecast_header__x6DkH\",\"weathers\":\"Forecast_weathers__15OQW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"current\":\"Current_current__2bCtp\",\"left\":\"Current_left__3KflQ\",\"right\":\"Current_right__3aLAj\",\"bottom\":\"Current_bottom__1ZcpP\",\"temperature\":\"Current_temperature__3INBI\",\"weather\":\"Current_weather__IJi8t\",\"metas\":\"Current_metas__3u91J\",\"humidity\":\"Current_humidity__nzLzK\",\"wind\":\"Current_wind__354z-\",\"city\":\"Current_city__1g754\",\"loading\":\"Current_loading__1n9VF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"otherCities\":\"OtherCities_otherCities__jnC3A\",\"toggle\":\"OtherCities_toggle__A0OLI\",\"container\":\"OtherCities_container__1xHw4\",\"active\":\"OtherCities_active__15sNT\",\"header\":\"OtherCities_header__2tsE7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Text_text__2sREv\"};","import { SET_CITY } from './type';\n\nconst DEFAULT_CITY = {\n  name: 'Melbourne',\n  id: 2158177,\n};\n\nexport default (state = DEFAULT_CITY, action) => {\n  switch(action.type) {\n    case SET_CITY:\n      return action.city;\n    \n    default:\n      return state;\n  };\n};\n","import { combineReducers, createStore } from 'redux';\nimport city from './city';\n\n// const reducer = (state, action) => ({\n//   city: city(state.city, action),\n// });\n\nconst reducer = combineReducers({\n  city,\n});\n\nexport default createStore(\n  reducer, \n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n","export const SET_CITY = 'SET_CITY';\n","import React from 'react';\nimport classNames from 'classnames/bind';\nimport styles from './Text.module.css';\n\nconst cx = classNames.bind(styles);\n\nconst Text = ({\n  children,\n  className,\n}) => (\n  <span className={cx('text', className)}>\n    {children}\n  </span>\n);\n\nexport default Text","import React from 'react';\nimport styles from './Meta.module.css';\nimport Text from '../Text';\n\nconst Meta = ({\n  title,\n  value,\n}) => (\n  <div className={styles.meta}>\n    <Text className={styles.title}>{title}</Text>\n    <br />\n    <Text className={styles.value}>{value}</Text>\n  </div>\n);\n\nexport default Meta;\n","import React from 'react';\n\nconst Temperature = ({\n  children,\n  className,\n}) => (\n  <span className={className}>\n    {children}\n    <span>&nbsp;</span>\n    <span>&#176;</span>\n  </span>\n);\n\nexport default Temperature\n","import React from 'react';\n\nconst VerticalDivider = ({\n  color,\n  width,\n  className,\n}) => (\n  <div \n    className={className}\n    style={{\n      width,\n      backgroundColor: color,\n    }} \n  />\n);\n\nexport default VerticalDivider;","import axios from 'axios';\n\nconst baseURL = 'https://api.openweathermap.org/data/2.5';\n\nconst OpenWeatherMap = axios.create({\n  baseURL,\n});\n\nconst enrichRequestWithAppId = (config) => {\n  config.params.appid = '2466213f21b4b723d341e00a430a7673';\n\n  return config;\n}\n\nconst enrichRequestWithCelsiusUnits = (config) => {\n  config.params.units = 'metric';\n\n  return config;\n};\n\nOpenWeatherMap.interceptors.request.use(enrichRequestWithAppId);\nOpenWeatherMap.interceptors.request.use(enrichRequestWithCelsiusUnits);\n\nexport default OpenWeatherMap;","import OpenWeatherMap from '../../utils/OpenWeatherMap';\n\nexport default (id) => OpenWeatherMap.get('/weather', {\n  params: {\n    id,\n  },\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styles from './Current.module.css';\nimport Meta from './components/Meta';\nimport Text from './components/Text';\nimport Temperature from '../Temperature';\nimport VerticalDivider from '../VerticalDivider';\nimport getWeather from '../../apis/getWeather';\n\nclass Current extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: null,\n      loading: true,\n    }\n  }\n\n  componentDidMount() {\n    this.getWeather();\n  }\n\n  componentDidUpdate(props) {\n    if (props.city !== this.props.city) {\n      this.getWeather();\n    }\n  }\n\n  async getWeather() {\n    const { city } = this.props;\n\n    this.setState({\n      loading: true,\n    });\n\n    const { id } = city;\n\n    const { data } = await getWeather(id);\n\n    this.setState({\n      data,\n      loading: false,\n    });\n  }\n\n  render() {\n    const { data, loading } = this.state;\n\n    return (\n      <div data-testid=\"CURRENT\" className={styles.current}>\n        {loading ? (\n          <div className={styles.left}>\n            <div className={styles.loading}>Loading...</div>\n          </div>\n        ) : (\n          <React.Fragment>\n            <div className={styles.left}>\n              <div data-testid=\"TEMP\" className={styles.temperature}>\n                <Temperature>{data.main.temp}</Temperature>\n              </div>\n              <div data-testid=\"WEATHER\" className={styles.weather}>\n                <Text>{data.weather[0].main}</Text>\n              </div>\n              <div className={styles.metas}>\n                <div data-testid=\"HUMIDITY\" className={styles.humidity}>\n                  <Meta title=\"HUMIDITY\" value={`${data.main.humidity}%`} />\n                </div>\n                <VerticalDivider width=\"2px\" color=\"rgba(255, 255, 255, 0.7)\" />\n                <div data-testid=\"WIND\" className={styles.wind}>\n                  <Meta title=\"WIND\" value={`${data.wind.speed} K/M`} />\n                </div>\n              </div>\n            </div>\n            <div className={styles.right}>\n            <h1 data-testid=\"NAME\" className={styles.city}>{data.name}</h1>\n            </div>\n          </React.Fragment>\n        )}\n        <div className={styles.bottom} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  city: state.city,\n});\n\nconst CurrentContainer = connect(mapStateToProps)(Current);\n\nexport default CurrentContainer;\n","import React from 'react';\nimport styles from './City.module.css';\nimport Temperature from '../../../Temperature';\n\nconst City = ({\n  name,\n  weather,\n  temperature,\n  onClick,\n}) => (\n  <button data-testid=\"CITY\" className={styles.city} onClick={onClick}>\n    <h3 data-testid=\"NAME\" className={styles.name}>{name}</h3>\n    <div data-testid=\"TEMP\" className={styles.temperature}>\n      <Temperature>{temperature}</Temperature>\n    </div>\n    <img \n      data-testid=\"WEATHER_ICON\"\n      className={styles.weather}\n      src={`http://openweathermap.org/img/wn/${weather.icon}.png`} \n      alt={weather.description} \n    />\n  </button>\n);\n\nexport default City;\n","import OpenWeatherMap from '../../utils/OpenWeatherMap';\n\nexport default (ids) => OpenWeatherMap.get('/group', {\n  params: {\n    id: ids.join(','),\n  },\n});","import React from 'react';\nimport styles from './OtherCities.module.css';\nimport City from './components/City';\nimport getWeathers from '../../apis/getWeathers';\nimport classNames from 'classnames/bind';\nimport setCity from '../../store/city/actions/setCity';\nimport { connect } from 'react-redux';\n\nconst cx = classNames.bind(styles);\n\nexport const CITIES = [{\n  name: 'Melbourne',\n  id: '2158177',\n}, {\n  name: 'Sydney',\n  id: '2147714',\n}, {\n  name: 'Brisbane',\n  id: '2174003',\n}, {\n  name: 'Perth',\n  id: '2063523',\n}];\n\nclass OtherCities extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: null,\n      loading: true,\n      toggle: false,\n    }\n  }\n\n  componentDidMount() {\n    this.getWeathers();\n  }\n\n  async getWeathers() {\n    const ids = CITIES.map((c) => c.id);\n\n    const { data } = await getWeathers(ids);\n\n    this.setState({\n      data,\n      loading: false,\n    });\n  }\n\n  render() {\n    const { data, loading, toggle } = this.state;\n    const { currentCity, onCityClick } = this.props; \n\n    return (\n      <div data-testid=\"OTHER_CITIES\" className={styles.otherCities}>\n        {!toggle && (\n          <button \n            className={styles.toggle} \n            onClick={() => this.setState((s) => ({ toggle: !s.toggle }))}\n          >\n            View More Cities ...\n          </button>\n        )}\n        <div className={cx('container', { active: toggle })}>\n          <h2 className={styles.header}>Other Cities</h2>\n          {loading ? (\n            <div className={styles.loading}>Loading...</div>\n          ) : (\n            <div className={styles.cities}>\n              {data.list.map((item) => {\n                if (item.id === currentCity.id) {\n                  return null;\n                }\n\n                return (\n                  <City \n                    key={item.id}\n                    name={item.name} \n                    temperature={parseInt(item.main.temp)}\n                    weather={{ \n                      icon: item.weather[0].icon, \n                      description: item.weather[0].main,\n                    }} \n                    onClick={() => onCityClick({\n                      id: item.id,\n                      name: item.name,\n                    })}\n                  />\n                )\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currentCity: state.city,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onCityClick: (city) => dispatch(setCity(city)),\n});\n\nconst OtherCitiesContainer = connect(\n  mapStateToProps, \n  mapDispatchToProps,\n)(OtherCities)\n\nexport default OtherCitiesContainer;","import { SET_CITY } from '../../type';\n\nexport default (city) => ({\n  type: SET_CITY,\n  city,\n});\n","import React from 'react';\nimport styles from './Weather.module.css';\nimport Temperature from '../../../Temperature';\n\nconst Weather = ({\n  day,\n  temperature,\n  weather,\n}) => (\n  <div data-testid=\"WEATHER\" className={styles.weather}>\n    <h3 data-testid=\"DAY\" className={styles.day}>{day}</h3>\n    <img \n      data-testid=\"WEATHER_ICON\"\n      className={styles.icon}\n      src={`http://openweathermap.org/img/wn/${weather.icon}@2x.png`} \n      alt={weather.description} \n    />\n    <div data-testid=\"TEMP\" className={styles.temperature}>\n      <Temperature>{temperature}</Temperature>\n    </div>\n  </div>\n);\n\nexport default Weather;","import React from 'react';\nimport styles from './Forecast.module.css';\nimport Weather from './components/Weather';\n\nconst Forecast = () => (\n  <div data-testid=\"FORECAST\" className={styles.forecast}>\n    <h2 className={styles.header}>Forecast</h2>\n    <div className={styles.weathers}>\n      <Weather\n        day=\"MON\" \n        temperature=\"9\"\n        weather={{ icon: '11d', description: 'Thunderstorm' }} \n      />\n      <Weather \n        day=\"TUE\" \n        temperature=\"15\"\n        weather={{ icon: '01d', description: 'Clear' }} \n      />\n      <Weather \n        day=\"WED\" \n        temperature=\"11\"\n        weather={{ icon: '03d', description: 'Clouds' }} \n      />\n      <Weather \n        day=\"THU\" \n        temperature=\"7\"\n        weather={{ icon: '50d', description: 'Mist' }} \n      />\n      <Weather \n        day=\"FRI\" \n        temperature=\"8\"\n        weather={{ icon: '09d', description: 'Rain' }} \n      />\n    </div>\n  </div>\n);\n\nexport default Forecast;","import React from 'react';\nimport styles from './App.module.css';\nimport Current from './components/Current';\nimport OtherCities from './components/OtherCities';\nimport VerticalDivider from './components/VerticalDivider';\nimport Forecast from './components/Forecast';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className={styles.app}>\n        <div className={styles.weather}>\n          <div className={styles.top}>\n            <Current />\n          </div>\n          <div className={styles.bottom}>\n            <OtherCities />\n            <VerticalDivider className={styles.verticalDivider} color=\"rgba(0, 0, 0, 0.1)\" width=\"3px\" />\n            <Forecast />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// React Context\n// Provider (*) - Consumer (*)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}